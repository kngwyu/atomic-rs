var N=null,E="",T="t",U="u",searchIndex={};
var R=["atomic","ordering","Stores a value into the `Atomic` if the current value is…","result","fetch_and","fetch_or","fetch_xor","fetch_add","Add to the current value, returning the previous value.","fetch_sub","Subtract from the current value, returning the previous…","Bitwise and with the current value, returning the previous…","Bitwise or with the current value, returning the previous…","Bitwise xor with the current value, returning the previous…","fetch_min","Minimum with the current value.","fetch_max","Maximum with the current value.","try_from","try_into","borrow_mut","formatter","Ordering"];

searchIndex["atomic"]={"doc":"Generic `Atomic<T>` wrapper type","i":[[5,"fence",R[0],"An atomic fence.",N,[[[R[1]]]]],[4,R[22],E,"Atomic memory orderings",N,N],[13,"Relaxed",E,"No ordering constraints, only atomic operations.",0,N],[13,"Release",E,"When coupled with a store, all previous operations become…",0,N],[13,"Acquire",E,"When coupled with a load, if the loaded value was written…",0,N],[13,"AcqRel",E,"Has the effects of both [`Acquire`] and [`Release`]…",0,N],[13,"SeqCst",E,"Like [`Acquire`]/[`Release`]/[`AcqRel`] (for load, store,…",0,N],[3,"Atomic",E,"A generic atomic wrapper type which allows an object to be…",N,N],[11,"new",E,"Creates a new `Atomic`.",1,[[[T]],[R[0]]]],[11,"is_lock_free",E,"Checks if `Atomic` objects of this type are lock-free.",1,[[],["bool"]]],[11,"get_mut",E,"Returns a mutable reference to the underlying type.",1,[[["self"]],[T]]],[11,"into_inner",E,"Consumes the atomic and returns the contained value.",1,[[],[T]]],[11,"load",E,"Loads a value from the `Atomic`.",1,[[["self"],[R[1]]],[T]]],[11,"store",E,"Stores a value into the `Atomic`.",1,[[["self"],[R[1]],[T]]]],[11,"swap",E,"Stores a value into the `Atomic`, returning the old value.",1,[[["self"],[R[1]],[T]],[T]]],[11,"compare_exchange",E,R[2],1,[[["self"],[R[1]],[T]],[R[3]]]],[11,"compare_exchange_weak",E,R[2],1,[[["self"],[R[1]],[T]],[R[3]]]],[11,R[4],E,"Logical \"and\" with a boolean value.",1,[[["self"],[R[1]],["bool"]],["bool"]]],[11,R[5],E,"Logical \"or\" with a boolean value.",1,[[["self"],[R[1]],["bool"]],["bool"]]],[11,R[6],E,"Logical \"xor\" with a boolean value.",1,[[["self"],[R[1]],["bool"]],["bool"]]],[11,R[7],E,R[8],1,[[["self"],["i8"],[R[1]]],["i8"]]],[11,R[9],E,R[10],1,[[["self"],["i8"],[R[1]]],["i8"]]],[11,R[4],E,R[11],1,[[["self"],["i8"],[R[1]]],["i8"]]],[11,R[5],E,R[12],1,[[["self"],["i8"],[R[1]]],["i8"]]],[11,R[6],E,R[13],1,[[["self"],["i8"],[R[1]]],["i8"]]],[11,R[7],E,R[8],1,[[["self"],[R[1]],["i16"]],["i16"]]],[11,R[9],E,R[10],1,[[["self"],[R[1]],["i16"]],["i16"]]],[11,R[4],E,R[11],1,[[["self"],[R[1]],["i16"]],["i16"]]],[11,R[5],E,R[12],1,[[["self"],[R[1]],["i16"]],["i16"]]],[11,R[6],E,R[13],1,[[["self"],[R[1]],["i16"]],["i16"]]],[11,R[7],E,R[8],1,[[["self"],[R[1]],["i32"]],["i32"]]],[11,R[9],E,R[10],1,[[["self"],[R[1]],["i32"]],["i32"]]],[11,R[4],E,R[11],1,[[["self"],[R[1]],["i32"]],["i32"]]],[11,R[5],E,R[12],1,[[["self"],[R[1]],["i32"]],["i32"]]],[11,R[6],E,R[13],1,[[["self"],[R[1]],["i32"]],["i32"]]],[11,R[7],E,R[8],1,[[["self"],["i64"],[R[1]]],["i64"]]],[11,R[9],E,R[10],1,[[["self"],["i64"],[R[1]]],["i64"]]],[11,R[4],E,R[11],1,[[["self"],["i64"],[R[1]]],["i64"]]],[11,R[5],E,R[12],1,[[["self"],["i64"],[R[1]]],["i64"]]],[11,R[6],E,R[13],1,[[["self"],["i64"],[R[1]]],["i64"]]],[11,R[7],E,R[8],1,[[["self"],["isize"],[R[1]]],["isize"]]],[11,R[9],E,R[10],1,[[["self"],["isize"],[R[1]]],["isize"]]],[11,R[4],E,R[11],1,[[["self"],["isize"],[R[1]]],["isize"]]],[11,R[5],E,R[12],1,[[["self"],["isize"],[R[1]]],["isize"]]],[11,R[6],E,R[13],1,[[["self"],["isize"],[R[1]]],["isize"]]],[11,R[7],E,R[8],1,[[["self"],["i128"],[R[1]]],["i128"]]],[11,R[9],E,R[10],1,[[["self"],["i128"],[R[1]]],["i128"]]],[11,R[4],E,R[11],1,[[["self"],["i128"],[R[1]]],["i128"]]],[11,R[5],E,R[12],1,[[["self"],["i128"],[R[1]]],["i128"]]],[11,R[6],E,R[13],1,[[["self"],["i128"],[R[1]]],["i128"]]],[11,R[14],E,R[15],1,[[["self"],["i8"],[R[1]]],["i8"]]],[11,R[16],E,R[17],1,[[["self"],["i8"],[R[1]]],["i8"]]],[11,R[14],E,R[15],1,[[["self"],[R[1]],["i16"]],["i16"]]],[11,R[16],E,R[17],1,[[["self"],[R[1]],["i16"]],["i16"]]],[11,R[14],E,R[15],1,[[["self"],[R[1]],["i32"]],["i32"]]],[11,R[16],E,R[17],1,[[["self"],[R[1]],["i32"]],["i32"]]],[11,R[14],E,R[15],1,[[["self"],["i64"],[R[1]]],["i64"]]],[11,R[16],E,R[17],1,[[["self"],["i64"],[R[1]]],["i64"]]],[11,R[14],E,R[15],1,[[["self"],["isize"],[R[1]]],["isize"]]],[11,R[16],E,R[17],1,[[["self"],["isize"],[R[1]]],["isize"]]],[11,R[14],E,R[15],1,[[["self"],["i128"],[R[1]]],["i128"]]],[11,R[16],E,R[17],1,[[["self"],["i128"],[R[1]]],["i128"]]],[11,R[7],E,R[8],1,[[["self"],[R[1]],["u8"]],["u8"]]],[11,R[9],E,R[10],1,[[["self"],[R[1]],["u8"]],["u8"]]],[11,R[4],E,R[11],1,[[["self"],[R[1]],["u8"]],["u8"]]],[11,R[5],E,R[12],1,[[["self"],[R[1]],["u8"]],["u8"]]],[11,R[6],E,R[13],1,[[["self"],[R[1]],["u8"]],["u8"]]],[11,R[7],E,R[8],1,[[["self"],["u16"],[R[1]]],["u16"]]],[11,R[9],E,R[10],1,[[["self"],["u16"],[R[1]]],["u16"]]],[11,R[4],E,R[11],1,[[["self"],["u16"],[R[1]]],["u16"]]],[11,R[5],E,R[12],1,[[["self"],["u16"],[R[1]]],["u16"]]],[11,R[6],E,R[13],1,[[["self"],["u16"],[R[1]]],["u16"]]],[11,R[7],E,R[8],1,[[["self"],["u32"],[R[1]]],["u32"]]],[11,R[9],E,R[10],1,[[["self"],["u32"],[R[1]]],["u32"]]],[11,R[4],E,R[11],1,[[["self"],["u32"],[R[1]]],["u32"]]],[11,R[5],E,R[12],1,[[["self"],["u32"],[R[1]]],["u32"]]],[11,R[6],E,R[13],1,[[["self"],["u32"],[R[1]]],["u32"]]],[11,R[7],E,R[8],1,[[["self"],[R[1]],["u64"]],["u64"]]],[11,R[9],E,R[10],1,[[["self"],[R[1]],["u64"]],["u64"]]],[11,R[4],E,R[11],1,[[["self"],[R[1]],["u64"]],["u64"]]],[11,R[5],E,R[12],1,[[["self"],[R[1]],["u64"]],["u64"]]],[11,R[6],E,R[13],1,[[["self"],[R[1]],["u64"]],["u64"]]],[11,R[7],E,R[8],1,[[["self"],[R[1]],["usize"]],["usize"]]],[11,R[9],E,R[10],1,[[["self"],[R[1]],["usize"]],["usize"]]],[11,R[4],E,R[11],1,[[["self"],[R[1]],["usize"]],["usize"]]],[11,R[5],E,R[12],1,[[["self"],[R[1]],["usize"]],["usize"]]],[11,R[6],E,R[13],1,[[["self"],[R[1]],["usize"]],["usize"]]],[11,R[7],E,R[8],1,[[["self"],[R[1]],["u128"]],["u128"]]],[11,R[9],E,R[10],1,[[["self"],[R[1]],["u128"]],["u128"]]],[11,R[4],E,R[11],1,[[["self"],[R[1]],["u128"]],["u128"]]],[11,R[5],E,R[12],1,[[["self"],[R[1]],["u128"]],["u128"]]],[11,R[6],E,R[13],1,[[["self"],[R[1]],["u128"]],["u128"]]],[11,R[14],E,R[15],1,[[["self"],[R[1]],["u8"]],["u8"]]],[11,R[16],E,R[17],1,[[["self"],[R[1]],["u8"]],["u8"]]],[11,R[14],E,R[15],1,[[["self"],["u16"],[R[1]]],["u16"]]],[11,R[16],E,R[17],1,[[["self"],["u16"],[R[1]]],["u16"]]],[11,R[14],E,R[15],1,[[["self"],["u32"],[R[1]]],["u32"]]],[11,R[16],E,R[17],1,[[["self"],["u32"],[R[1]]],["u32"]]],[11,R[14],E,R[15],1,[[["self"],[R[1]],["u64"]],["u64"]]],[11,R[16],E,R[17],1,[[["self"],[R[1]],["u64"]],["u64"]]],[11,R[14],E,R[15],1,[[["self"],[R[1]],["usize"]],["usize"]]],[11,R[16],E,R[17],1,[[["self"],[R[1]],["usize"]],["usize"]]],[11,R[14],E,R[15],1,[[["self"],[R[1]],["u128"]],["u128"]]],[11,R[16],E,R[17],1,[[["self"],[R[1]],["u128"]],["u128"]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[18],E,E,0,[[[U]],[R[3]]]],[11,"into",E,E,0,[[],[U]]],[11,R[19],E,E,0,[[],[R[3]]]],[11,"borrow",E,E,0,[[["self"]],[T]]],[11,R[20],E,E,0,[[["self"]],[T]]],[11,"type_id",E,E,0,[[["self"]],["typeid"]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[18],E,E,1,[[[U]],[R[3]]]],[11,"into",E,E,1,[[],[U]]],[11,R[19],E,E,1,[[],[R[3]]]],[11,"borrow",E,E,1,[[["self"]],[T]]],[11,R[20],E,E,1,[[["self"]],[T]]],[11,"type_id",E,E,1,[[["self"]],["typeid"]]],[11,"fmt",E,E,0,[[["self"],[R[21]]],[["error"],[R[3],["error"]]]]],[11,"hash",E,E,0,[[["self"],["__h"]]]],[11,"eq",E,E,0,[[["self"],[R[1]]],["bool"]]],[11,"clone",E,E,0,[[["self"]],[R[1]]]],[11,"fmt",E,E,1,[[["self"],[R[21]]],[R[3]]]],[11,"default",E,E,1,[[],["self"]]]],"p":[[4,R[22]],[3,"Atomic"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);